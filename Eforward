# ESMOOTH: Kalman filtering for the forward portion of the forward-backward algorithm implemented in the expectation step.
# @author: Anita Mehrotra
# @source: A.Blocker, 2008, "An EM algorithm for the estimation of affine state-space systems with or without known inputs"
# @date: December 11, 2013
# @class: CS281, Advanced Machine Learning
# @references: S Nemati, R Adams

def Eforward(z, u, F, B, H, Q, R, xs, Vs, pi_x, var_x, Ks, init_Vs):
    t=1
    T=len(z)
    I = 1 #this would be the identity matrix if x was 2-d
    
    old_x = xs[0]
    old_V = Vs[0]
    
    for t in xrange(T):
        
        ut = np.array([u[t,0], u[t,1], u[t,2]])
        zt = z[t]
        
        # compute intermediate steps
        xt_init = F * old_x + np.dot(B, ut)
        Vt_init = old_V * F**2 + Q
        Kt = Vt_init * H * (1/(H*Vt_init*H + R)) #last Kt used in Smoothing
        
        # compute filtered values of xt and Vt
        new_x = xt_init + Kt * (zt - H*xt_init) #assuming h = 0   
        new_V = (I - Kt*H)*Vt_init
        
        # store calculated vals
        xs.append(new_x)
        Vs.append(new_V)
        Ks.append(Kt)
        init_Vs.append(Vt_init)
        
        old_x = new_x
        old_V = new_V
        
    othervals = [Vs, Ks, init_Vs]
    return (xs, othervals)
